
IMAGE_BASE="$(shell basename $(shell pwd))"

help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

docker-build: ## initialize the development environment
	set -o errexit
	export DOCKER_BUILDKIT=1
	export PROGRESS_NO_TRUNC=1
	@echo "Building Docker container..."
	docker build --tag "$(IMAGE_BASE):latest" \
		--build-arg OS_VERSION="22.04" \
		--build-arg CUDA_VERSION="12.4.1" \
		--build-arg PYTHON_VERSION="3.11" \
		--build-arg USER_ID=$(shell id -u) \
		--build-arg GROUP_ID=$(shell id -g) \
		--build-arg NAME=$(shell whoami) \
		--build-arg WORKDIR_PATH=$(shell pwd) .
	@echo "Updating devcontainer.json"
	sed -i 's|WILL_BE_REPLACED_BY_MAKE|'$(IMAGE_BASE)'|g' .devcontainer/devcontainer.json


clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

clean-logs: ## Clean logs
	rm -rf logs/**

format: ## Run pre-commit hooks
	pre-commit run -a

sync: ## Merge changes from main branch to your current branch
	git pull
	git pull origin main

test: ## Run not slow tests
	pytest -k "not slow"

test-full: ## Run all tests
	pytest

train: ## Train the model
	docker run --runtime=nvidia --gpus all \
		--rm -it \
	    -v "$(shell pwd)":/workspace \
	    -w /workspace \
	    $(IMAGE_BASE):latest \
	    scripts/train.sh $(ARGS)


# docker build --tag "$(shell basename $(shell pwd)):latest" \
